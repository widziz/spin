import { createSpinGenerator } from './random';

let spinGenerator = null;

export const initSpinGenerator = (config) => {
  spinGenerator = createSpinGenerator(config);
  return spinGenerator;
};

export const startSpinAdvanced = ({
  currentRotation = 0,
  slots = 12,
  prizes = [],
  generator = null,
  generateOptions = {},
  onGenerate,
  onUpdate,
  onComplete
}) => {
  const resultGenerator = generator || spinGenerator;
  if (!resultGenerator) {
    throw new Error('Spin generator not initialized. Call initSpinGenerator() first.');
  }

  const spinResult = resultGenerator.generate(generateOptions);
  
  console.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
    targetSlot: spinResult.targetSlot,
    totalRotation: spinResult.totalRotation,
    targetAngle: spinResult.targetAngle,
    slotAngleFromTop: spinResult.slotAngleFromTop,
    slotAngleInWheel: spinResult.slotAngleInWheel,
    currentRotation
  });
  
  // –í—ã–∑—ã–≤–∞–µ–º callback –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (onGenerate) {
    onGenerate(spinResult);
  }

  let animationId = null;
  let currentAngle = currentRotation;
  let velocity = 0;
  let startTime = null;
  let lastTimestamp = null;

  // –¶–µ–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏ - –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ —É–≥–ª–∞
  const targetFinalAngle = currentRotation + spinResult.totalRotation;

  const animationConfig = {
    totalDuration: 6000,        // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    accelerationTime: 1000,     // –í—Ä–µ–º—è —Ä–∞–∑–≥–æ–Ω–∞
    maxSpeedTime: 2000,         // –í—Ä–µ–º—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    decelerationTime: 3000,     // –í—Ä–µ–º—è —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è
    maxVelocity: 20,            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–≥—Ä–∞–¥—É—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É)
  };

  // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è easing —Ñ—É–Ω–∫—Ü–∏—è
  const easeInOutCubic = (t) => {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  };

  const animate = (timestamp) => {
    if (!startTime) startTime = timestamp;
    if (!lastTimestamp) lastTimestamp = timestamp;

    const elapsed = timestamp - startTime;
    const deltaTime = timestamp - lastTimestamp;
    lastTimestamp = timestamp;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é easing —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–∞–∑–∞–º–∏
    let progress = Math.min(elapsed / animationConfig.totalDuration, 1);
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
    let easedProgress;
    if (elapsed < animationConfig.accelerationTime) {
      // –§–∞–∑–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
      const accelProgress = elapsed / animationConfig.accelerationTime;
      easedProgress = 0.1 * easeInOutCubic(accelProgress);
    } else if (elapsed < animationConfig.accelerationTime + animationConfig.maxSpeedTime) {
      // –§–∞–∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      const constProgress = (elapsed - animationConfig.accelerationTime) / animationConfig.maxSpeedTime;
      easedProgress = 0.1 + 0.7 * constProgress;
    } else {
      // –§–∞–∑–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
      const decelProgress = (elapsed - animationConfig.accelerationTime - animationConfig.maxSpeedTime) / animationConfig.decelerationTime;
      easedProgress = 0.8 + 0.2 * easeInOutCubic(decelProgress);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const newAngle = currentRotation + (spinResult.totalRotation * easedProgress);
    currentAngle = newAngle;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (onUpdate) {
      onUpdate(currentAngle);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (progress >= 1) {
      currentAngle = targetFinalAngle;
      finishSpin();
      return;
    }
    
    animationId = requestAnimationFrame(animate);
  };

  const finishSpin = () => {
    if (animationId) {
      cancelAnimationFrame(animationId);
      animationId = null;
    }
    
    const normalizedAngle = ((currentAngle % 360) + 360) % 360;
    const winningIndex = calculateWinningSlot(normalizedAngle, resultGenerator);

    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞:', {
      '–û–∂–∏–¥–∞–µ–º—ã–π —Å–ª–æ—Ç': spinResult.targetSlot,
      '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ—Ç': winningIndex,
      '–§–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª': normalizedAngle.toFixed(2),
      '–û–±—â–∏–π –ø–æ–≤–æ—Ä–æ—Ç': spinResult.totalRotation.toFixed(2),
      '–¢–µ–∫—É—â–∏–π —É–≥–æ–ª': currentAngle.toFixed(2),
      '–¶–µ–ª–µ–≤–æ–π —É–≥–æ–ª': targetFinalAngle.toFixed(2)
    });

    if (onComplete) {
      onComplete(currentAngle, winningIndex, spinResult.prize);
    }
  };

  animationId = requestAnimationFrame(animate);

  return {
    cancel: () => {
      if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
    },
    result: spinResult
  };
};

export function calculateWinningSlot(angle, generator) {
  const slotAngle = generator.slotAngle;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª
  const normalizedAngle = ((angle % 360) + 360) % 360;
  
  // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 270¬∞ (–≤–Ω–∏–∑—É)
  // –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π —Å–ª–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
  
  // –í –Ω–∞—à–µ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: —Å–ª–æ—Ç 0 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 270¬∞, —Å–ª–æ—Ç 1 —Å (270¬∞ + slotAngle), –∏ —Ç.–¥.
  // –£–≥–æ–ª –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
  const angleUnderPointer = (normalizedAngle + 270) % 360;
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç, –≤—ã—á–∏—Ç–∞—è –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ (270¬∞)
  const adjustedAngle = (angleUnderPointer - 270 + 360) % 360;
  const slotIndex = Math.floor(adjustedAngle / slotAngle) % generator.slots;
  
  console.log('üßÆ –†–∞—Å—á–µ—Ç —Å–ª–æ—Ç–∞:', {
    originalAngle: angle,
    normalizedAngle: normalizedAngle.toFixed(2),
    angleUnderPointer: angleUnderPointer.toFixed(2),
    adjustedAngle: adjustedAngle.toFixed(2),
    slotAngle: slotAngle.toFixed(2),
    calculatedSlot: slotIndex,
    totalSlots: generator.slots
  });
  
  return slotIndex;
}

export const startSpinSimple = (options) => {
  const { generator, ...rest } = options;
  const result = generator ? generator.generate() : { targetSlot: 0, rotations: 5 };
  return startSpinAdvanced({
    ...rest,
    generateOptions: { guaranteed: result.targetSlot }
  });
};