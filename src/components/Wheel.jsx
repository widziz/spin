import { useEffect, useRef, useState } from 'react';
import { createWheel } from '../utils/wheel/createWheel';
import { wheelConfig } from '../utils/wheel/config';
import { startSpinAdvanced, initSpinGenerator } from '../logic/spinLogic';
import { createSpinGenerator } from '../logic/random'; // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

export const Wheel = () => {
  const svgRef = useRef(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [rotation, setRotation] = useState(0);
  const [lastSpinResult, setLastSpinResult] = useState(null);
  const cancelSpinRef = useRef(null);
  const spinGeneratorRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
  useEffect(() => {
    if (!svgRef.current) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–µ—Å–æ
    createWheel(svgRef);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    spinGeneratorRef.current = createSpinGenerator({
      slots: wheelConfig.slots,
      prizes: wheelConfig.prizes,
      pointerPosition: 270 // –£–∫–∞–∑–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É –∫–æ–ª–µ—Å–∞
    });
    
    // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    initSpinGenerator({
      slots: wheelConfig.slots,
      prizes: wheelConfig.prizes,
      pointerPosition: 270
    });
  }, []);

  const handleSpin = () => {
    if (isSpinning) return;
    setIsSpinning(true);

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cancelSpinRef.current) {
      cancelSpinRef.current.cancel();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
    const spinInstance = startSpinAdvanced({
      currentRotation: rotation,
      slots: wheelConfig.slots,
      prizes: wheelConfig.prizes,
      generator: spinGeneratorRef.current, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
      generateOptions: {
        antiRepeat: true,      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        maxRepeats: 3,        // –ù–µ –±–æ–ª–µ–µ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤ –ø–æ–¥—Ä—è–¥
        // guaranteed: 5,      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
      },
      onGenerate: (result) => {
        // Callback –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–æ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏)
        console.log('üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
          —Å–ª–æ—Ç: result.targetSlot,
          –ø—Ä–∏–∑: `${result.prize?.image || ''} ${result.prize?.value || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
          –æ–±–æ—Ä–æ—Ç—ã: result.rotations.toFixed(1),
          id: result.id
        });
        
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        setLastSpinResult(result);
      },
      onUpdate: (newRotation) => {
        setRotation(newRotation);
      },
      onComplete: (finalRotation, winningIndex, prize) => {
        console.log('üèÜ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑:', `${prize?.value || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`üéØ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ->>> slot ${winningIndex}: ${prize?.image} ${prize?.value}`);
        
        setIsSpinning(false);
        setRotation(finalRotation);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞
        if (prize && prize.value && parseInt(prize.value) >= 100) {
          console.log('üéâ –ë–û–õ–¨–®–û–ô –í–´–ò–ì–†–´–®!');
        }
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–ø–∏–Ω
    cancelSpinRef.current = spinInstance;
  };

  const debugPrizes = () => {
    console.log('üîç –ü—Ä–∏–∑—ã –ø–æ —Å–ª–æ—Ç–∞–º:');
    wheelConfig.prizes.forEach((prize, index) => {
      console.log(`–°–ª–æ—Ç ${index}: ${prize.image} ${prize.value}`);
    });
  };

  return (
    <div className="wheel-container">
      <div className="roulette-container">
        <svg
          ref={svgRef}
          viewBox="0 0 800 800"
          style={{ 
            width: '100%', 
            height: '100%',
            transform: `rotate(${rotation}deg)`,
            transformOrigin: 'center',
            transition: 'none',
            overflow: 'visible'
          }}
        >
          <defs>
            <filter id="slot-glow" x="-200%" y="-200%" width="400%" height="400%">
              <feGaussianBlur in="SourceGraphic" stdDeviation="25" />
            </filter>
          </defs>
          <circle cx="400" cy="400" r="400" fill="none" stroke="none" />
        </svg>
      </div>

      <div className="pointer"></div>

      <div className="bottom-panel">
        <button
          className="spin-button"
          onClick={handleSpin}
          disabled={isSpinning}
        >
          {isSpinning ? '–ö–†–£–¢–ò–¢–°–Ø...' : '–ö–†–£–¢–ò–¢–¨'}
        </button>
        <button
          className="debug-button"
          onClick={debugPrizes}
          style={{ marginLeft: '10px', padding: '10px', fontSize: '12px' }}
        >
          –û–¢–õ–ê–î–ö–ê –ü–†–ò–ó–û–í
        </button>
      </div>
    </div>
  );
};